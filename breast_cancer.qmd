---
title: "Breast Cancer Analysis"
format: html
editor: visual
date: today
author:
  - Dolev Michaelovich
  - Giulio Benedetti
---

```{r}
#| include: false
knitr::opts_chunk$set(echo = TRUE)
```

This analysis aims at predicting whether checkpoint inhibition therapy should be administered to a breast cancer patient based on their genetic expression profile.

## Data Preparation

The necessary libraries are imported to set up the environment.

```{r}
#| message: false
#| warning: false
# Import libraries
library(SingleCellExperiment)
library(scran)
library(scater)
library(PCAtools)
library(patchwork)
library(bluster)
```

The expression table and the location metadata are read in.

```{r}
# Read assay
expression_data <- read.csv("data/assay.csv", row.names = 1) |>
  as.matrix() |>
  t()

# Read colData
location_data <- read.csv("data/location.csv", row.names = 1)
```

A `SingleCellExperiment` object is constructed from the assay and its corresponding colData.

```{r}
# Build SCE object
sce <- SingleCellExperiment(assay = list(counts = expression_data),
                            colData = location_data)

sce
```

The experiment includes `r ncol(sce)` cells which express `r nrow(sce)` genes.

## Normalisation

The counts assay is normalised with the log-norm transformation to make cells comparable and focus on logarithmic changes in expression.

```{r}
set.seed(100)

# Normalise by cluster library size
clust <- quickCluster(sce)
sce <- computeSumFactors(sce, cluster = clust, min.mean = 0.1)

# Scale and log transform counts
sce <- logNormCounts(sce)
```

## Feature Selection

Cells are modelled by their variability to determine whether a few Highly Variable Genes (HVGs) could be selected to represent cells.

```{r}
# Model gene variation
dec <- modelGeneVar(sce)
fit <- metadata(dec)
```

There are a few genes that show much greater variability than others (@fig-model). In particular, genes above the red line provide a certain extent of biological variance after excluding technical variance (red line). However, we decided to keep all of them in further analyses due to the relatively small size of the experiment, which might have been pre-filtered.

```{r}
#| label: fig-model
#| fig-cap: Model of the variance for each gene in terms of its log-expression
#|   profile. Every dot is a gene and the red line represents the baseline
#|   technical component.
# Visualise model fit to gene variation
plot(fit$mean, fit$var,
     xlab = "Mean log Expression",
     ylab = "Variance of log Expression")

curve(fit$trend(x), col = "red", add = TRUE, lwd = 2)
```

Genes are sorted by their variability to explore which genes might be used later to annotate clusters to the correct cell types. The first two, IGHG1 and IGHG4 represent B cell marker genes.

```{r}
# Order genes by variability
hvg <- getTopHVGs(dec)
hvg
```

## Dimensionality Reduction

Currently, cells are characterised by a large number of dimensions (`r nrow(sce)` genes). To select highly explanatory features and reduce noise, we perform Principal Component Analysis (PCA) on the assay.

```{r}
# Perform PCA
sce <- runPCA(sce,
              assay.type = "logcounts",
              ncomp = 20)

# Retrieve percent explained variance
pca.vars <- attr(reducedDim(sce, "PCA"), "percentVar")

# Find elbow
chosen.elbow <- findElbowPoint(pca.vars)

# Find cumulative explained variance
pca.cum.vars <- cumsum(pca.vars)
```

The number of PCs for further analyses was determined by the percentage of explained variance in relation to the number of PCs (@fig-pcomp). The first 7 PCs seem sufficient based on the elbow rule, whereas the first 9 PCs can explain more than 40% of the variance based on cumulative explained variance. Therefore, we reasoned that the first 10 PCs would provide an acceptable tradeoff between dimensionality and explained variance.

```{r}
#| label: fig-pcomp
#| fig-cap: Variance explained by PCs. On the left, individual variances
#|   explained by the first 20 PCs with the elbow marked by a vertical red
#|   dashed line. On the right, the cumulative variance explained by the first n
#|   PCs with a 40% threshold marked by a horizontal red dashed line.
par(mfrow = c(1, 2))

# Visualise elbow
plot(pca.vars, xlab = "PC", ylab = "Explained Variance (%)")
abline(v = chosen.elbow, col = "red", lty = 2)

# Visualise cumulative explained variance
plot(pca.cum.vars,
     xlab = "PC",
     ylab = "Explained Variance (%)",
     ylim = c(0, 100))

abline(h = 40, col="red", lty = 2)
grid()
```

For exploratory purposes, the most expressed gene in every cell was found. Cells whose most expressed gene was different from the top 5 genes across the entire assay were labelled as "Other".

```{r}
# Find top expressed gene for every cell
max.idx <- apply(assay(sce, "logcounts"), 2, which.max)
max.genes <- rownames(sce)[max.idx]

# Find top 5 expressed genes across assay
top.genes <- names(sort(table(max.genes), decreasing = TRUE))[seq(5)]
max.genes[!(max.genes %in% top.genes)] <- "Other"

# Store top expressed gene
sce$TopGene <- max.genes
```

The performance of PCA was roughly assessed by visualising the cells in the first four PCs coloured by their most expressed gene (@fig-pca). The first PC seems to encode most of the variance between IGHG1/IGHG4+ cells and other cells in terms of most expressed gene, whereas higher PCs might encode different information.

```{r}
#| label: fig-pca
#| fig-cap: PCA plots with the first four PCs and cells coloured by their most
#|   expressed gene.
# Visualise PCA
plotReducedDim(sce, "PCA",
               ncomp = 4,
               colour_by = "TopGene")
```

The first 10 PCs are fed to TSNE and UMAP to further identify groups of cells and their relative position.

```{r}
set.seed(100)

# Perform TSNE on the first 10 PCs
sce <- runTSNE(sce, dimred = "PCA", n_dimred = 10)
# Perform UMAP on the first 10 PCs
sce <- runUMAP(sce, dimred = "PCA", n_dimred = 10)
```

Both TSNE and UMAP could identify the IGHG1/IGHG4+ group of cells previously found in PCA (@fig-ord). This is encoded by the second axis in TSNE and the first axis in UMAP, respectively. Compared to PCA, TSNE and UMAP provided a better separation between other groups of cells, such as the HIF1A+, LYZ and other cells.

```{r}
#| label: fig-ord
#| fig-cap: Non-linear dimensionality reduction. On the left, a TSNE plot with a
#|   default perplexity of 30. On the right, a UMAP plot with default number of
#|   neighbours of 15 and minimum distance between embedded points of 0.01.
#|   Cells are coloured by their top expressed gene.

# Generate TSNE plot
tsne <- plotReducedDim(sce, "TSNE", colour_by = "TopGene")
# Generate UMAP plot
umap <- plotReducedDim(sce, "UMAP", colour_by="TopGene")

# Visualise TSNE and UMAP
tsne + umap +
  plot_layout(guides = "collect")
```

## Clustering

Groups of cells with similar expression profiles can be found by clustering. Then, they can be annotated with the most appropriate cell type based on which marker genes they express. Cells were clustered based on the first PCs with a two-step approach involving K-means and network-graph algorithms. The former serves to speed up clustering by finding the initial 1000 centers, while the latter aims to merge and refine the cells to a maximum of 10 clusters. As a result, we obtain 6 clusters of variable size from about 200 to 800 cells.

```{r}
set.seed(100)

# Cluster cells
kclust <- clusterCells(sce,
                       # assay.type = "logcounts",
                       use.dimred = "PCA",
                       BLUSPARAM = TwoStepParam(first = KmeansParam(centers = 1000),
                                                second = NNGraphParam(k = 10)),
                       full = TRUE)

# Store clustering results
sce$Cluster <- kclust$cluster

# View cluster counts
tab <- table(sce$Cluster)
knitr::kable(tab, col.names = c("Cluster", "Count"))
```

The six clusters span different regions of the UMAP space (@fig-umap). Some of the clusters, especially cluster 1, match the groups previously defined by most expressed gene. However, it is clear that more complex information is encoded by the clustering than by top gene stratification.

```{r}
#| label: fig-umap
#| fig-cap: Clustering results. UMAP plot of cells coloured by their assigned
#|   clusters. Cells were clustered with a two-step approach (kmeans and
#|   graph-based) based on the first PCs.

# Visualise UMAP of clustered cells
plotReducedDim(sce, "UMAP",
               colour_by = "Cluster",
               text_by = "Cluster")
```

## Marker Gene Detection

Marker genes are detected by pairwise comparisons of gene expression between clusters. Then, the average effect sizes across all comparisons are computed with several scores. Here, we use the mean AUC as an estimate to assess the importance of a marker gene for each cluster. For simplicity, only the top 5 marker genes in terms of mean AUC were considered for every cluster.

```{r}
# Score marker genes by cluster
marker.info <- scoreMarkers(sce, sce$Cluster)

# Find top 5 marker genes for every cluster based on mean AUC score
marker.genes <- lapply(
  marker.info,
  function(x) rownames(x)[order(x$mean.AUC, decreasing = TRUE)][seq(5)]
)

# View top 5 marker genes by cluster
marker.genes
```

## Cell Type Annotation

Clusters were annotated as follows:

-   Cluster 1: B cells
-   Cluster 2: Fibroblasts
-   Clusters 3 and 6: Tumour Core
-   Cluster 4: Tumour Edge
-   Cluster 5: T cells with traces of fibroblasts

Cluster 1 is linked to IGHG1 and IGHG4, which are typical of B cells. Cluster 2
represents fibroblasts, as it is associated with fibronectin (FN1), a component
of the extracellular matrix, actin (ACTA2) and kinesin (KIF23), essential for
intracellular motility, the histocompatibility complex class B (HLA-B). Clusters
3 and 6 are related to KRT18 and KRT19, which are typical of tumour cells.
Cluster 4 is connected to CD24 and FOS, two known oncogenes, but also lysozyme
(LYZ) produced by macrophages to lyse cells. Thus we labelled cluster 4 as the
tumour core, as it might reflect the boarder regions between the the immune
response and the tumour. Cluster 5 is characterised by FOXP3, a T cell marker
gene, but also by SULF1, expressed by fibroblasts. Thus, this cluster might
constitute a hybrid between T cells and fibroblasts.

```{r}
# Infer cell type manually
cell.types <- c("B cell", "Fibroblast", "Tumour Core", "Tumour Edge", "T cell", "Tumour Core")
# Store cell type
sce$CellType <- sapply(sce$Cluster, function(x) cell.types[x])
```

The annotated cells are shown both as clusters in the UMAP space and in their original space of the tissue in @fig-umap-spatial.

```{r}
#| label: fig-umap-spatial
#| fig-cap: Results of cell type annotation. On the left, a UMAP plot of the
#|   annotated cells coloured by their inferred cell type. Numbers represent
#|   the centre of each previously found cluster. On the right, cells in their
#|   original 2D space of the breast tissue.

# Generate UMAP plot
umap <- plotReducedDim(sce, "UMAP", colour_by = "CellType", text_by = "Cluster")
# Generate colData plot
spatial <- plotColData(sce, "Y", "X", colour_by = "CellType")

# Visualise UMAP and colData plots
umap + spatial +
  plot_layout(guides = "collect")
```

## Discussion

### Question 1

Based on our manual annotation, more than 30% of the assay consists of B or T cells. Thus, the percentage of immune cells likely surpasses 10% even if some margin of error is considered.

```{r}
# Compute percentage of cell types
tab <- table(sce$CellType) / ncol(sce) * 100

knitr::kable(tab,
             digits = 2,
             col.names = c("Cell Type", "Abundance (%)"))
```

### Question 2

B and T cells appear to intermix with the tumour cells to a large extent. The spatial distribution illustrated by Fig @fig-umap-spatial suggests that immune cells attempt to infiltrate the small agglomerations formed by the tumour cells, which reflects a positive response of the immune system against the tumour.

### Question 3

More than 10% of the cells in the assay express at least 1 copy of the PD-L1 gene, which corresponds to a non-null log-count as computed below. Also within only T cells, at least 10% of them express the PD-L1 gene.

```{r}
# Compute percentage of PD-L1+ cells
tab1 <- table(assay(sce, "logcounts")["CD274", ] != 0) / ncol(sce) * 100

# Compute percentage of PD-L1+ T cells
sce.tcell <- sce[ , sce$CellType == "T cell"]
tab2 <- table(assay(sce.tcell, "logcounts")["CD274", ] != 0) /
  sum(ncol(sce.tcell)) * 100

# Combine tables
tab <- rbind(tab1, tab2)
rownames(tab) <- c("All Cells", "T Cells")
colnames(tab) <- c("PD-L1-", "PD-L1+")

# View results
knitr::kable(tab, digits = 2)
```

@fig-exp illustrates the distribution of PD-L1 expression across different cell types.

```{r}
#| label: fig-exp
#| fig-cap: Distribution of PD-L1 log-norm expression across all cells grouped
#|   and coloured by annotated cell type.

# Visualise expression of PD-L1
plotExpression(sce, features = "CD274", x = "CellType", colour_by = "CellType")
```

## Conclusion

The current study aimed to annotate cells from a tissue of breast cancer analysed with scRNA-seq in order to predict the patient's response to checkpoint inhibitory therapy. Overall, the analyses provided all the indicators for a positive response: 1) immune cells make up about 30% of the tissue, 2) they are intermixed with the tumour and 3) about 10% of all cells (as well as T cells) express the PD-L1 gene. Taken altogether, the patient is expected to respond well to checkpoint inhibitory therapy.
