---
title: "Project 1"
format: html
editor: visual
---

```{r}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

# Part 1

Next-Generation Sequencing (NGS) entails several high-throughput techniques
that generate big amount of data. The main two approaches involve long-read
sequencing with nanopore technology and short-read sequencing with an Illumina
machine. In the latter case, Polymerase Chain Reaction (PCR) is performed
by the sequence to amplify the library and quantify gene expression. 

In the ideal situation, we would expect to have a doubling of each RNA strand in
a linear fashion,  so that each molecule is duplicated and the ratio between the
expression levels of the different genes is maintained. However, this process
introduces different types of errors due to factors such as the composition of
the sequence (for example high fraction of G or C) or the secondary structure,
stochasticity and mutation that make it impossible to deduce the absolute gene
expression, especially for low-copy genes.

In addition, the sequencing process involves breaking the mRNA sequence into
several pieces because the machine cannot sequence a full-length genome. Thus,
multiple sequences may originate from the same sequence, so we may think there
are several copies of the same gene, but in reality it is one broken copy.
Therefore, we may infer a wrong expression level. Instead, sequencing data
provides a compositional measure of gene expression, where every observation
(or gene) is quantified in relation with the rest of the pool. Thus, it is
essential to normalise reads from different samples when drawing between-sample
comparisons.

# Part 2

The package with the data of interest is imported.

```{r}
# Import package
library(pasilla)
```

RNA-Seq data from Drosophila melanogaster is loaded from the package.

```{r}
# Load data
pasCts <- system.file("extdata", "pasilla_gene_counts.tsv",
                      package = "pasilla", mustWork = TRUE)

pasAnno <- system.file("extdata", "pasilla_sample_annotation.csv",
                       package="pasilla", mustWork = TRUE)

cts <- as.matrix(read.csv(pasCts, sep = "\t", row.names = "gene_id"))

coldata <- read.csv(pasAnno, row.names = 1)
coldata <- coldata[ , c("condition", "type")]

rownames(coldata) <- sub("fb", "", rownames(coldata))
cts <- cts[, rownames(coldata)]
```

The matrix `cts` contains the gene expression data in terms of the number of
reads for `r nrow(cts)` genes from `r ncol(cts)` samples.

```{r}
# View head of counts assay
head(cts, 10)
```

Dimensions of the counts assay can be retrieved with the `dim` function.

```{r}
# Store assay dimensions
mat_dim <- dim(cts)
# View assay dimensions
mat_dim
```
Samples differ from one another in the library size. Therefore, read counts
should be normalised.

```{r}
# View raw library sizes
colSums(cts)
```

Normalisation is performed by dividing the reads from every sample by the
corresponding library size and multiplying by the library size of the first
sample.

```{r}
# Normalise all samples to library size of first sample
norm_cts <- apply(cts, 2, function(col) col / sum(col) * sum(cts[ , 1]))
# Check normalised library sizes
colSums(norm_cts)
```

# Part 3

A function to compute log means and variances for every feature in an assay is
defined below, so that the same workflow can be applied both to untreated and
treated samples.

```{r}
# Define function to compute feature-wise log means and vars
find_log_stats <- function(assay) {
  
  # Compute row means and vars
  gene_means <- rowMeans(assay)
  gene_vars <- rowVars(assay)

  # Take log of means and vars with pseudocount
  gene_log_means <- log(gene_means + 1)
  gene_log_vars <- log(gene_vars + 1)

  # Combine data into a data.frame
  df <- data.frame(Var = gene_log_vars, Mean = gene_log_means)
  return(df)
}
```

The log statistics of the genes from the untreated samples are computed.

```{r}
# Subset data to untreated samples
control_cts <- norm_cts[ , grep("^untreated", colnames(norm_cts))]
# Find log means and vars for genes in control samples
control_stats <- find_log_stats(control_cts)
```

The Poisson distribution fits the data relatively well for lower numbers of
reads, but it creates bias for higher numbers of reads where the variance
becomes larger than the mean. Such phenomenon is called *overdispersion*.


```{r}
# Visualise fit of Poisson distribution to data
plot(control_stats$Mean, control_stats$Var, xlab = "Log Means", ylab = "Log Vars")
abline(a = 0, b = 1, col = "red")
legend("topleft", "Poisson Fit", lty = 1, col = "red")
```

The dispersion coefficient of the negative binomial distribution can be
determined by fitting the corresponding mean-variance relationship to the data.


```{r}
# Fit dispersion coefficient of negative binomial distribution to data
nls_fit <- nls(Var ~ Mean + a * Mean^2, data = control_stats, start = list(a = 0))
summary(nls_fit)
```

Unlike the Poisson distribution, the negative binomial distribution fits well
the data both for lower and higher numbers of reads.

```{r}
# Define var-mean relationship of negative binomial distribution
disper_coef <- summary(nls_fit)$coefficients["a", "Estimate"]
neg_binom <- function(x) x + disper_coef * x^2


# Visualise fit of negative binomial distribution to data
plot(control_stats$Mean, control_stats$Var, xlab = "Log Means", ylab = "Log Vars")
curve(neg_binom, col = "red", add = TRUE)
legend("topleft", "Negative Binomial Fit", lty = 1, col = "red")
```

The same pipeline is applied to the genes from the treated samples.

```{r}
# Subset data to treated samples
treated_cts <- norm_cts[ , grep("^treated", colnames(norm_cts))]
# Find log means and vars for genes in treated samples
treated_stats <- find_log_stats(treated_cts)
```

```{r}
# Visualise fit of Poisson distribution to data
plot(control_stats$Mean, treated_stats$Var, xlab = "Log Means", ylab = "Log Vars")
abline(a = 0, b = 1, col = "red")
legend("topleft", "Poisson Fit", lty = 1, col = "red")
```

```{r}
# Fit dispersion coefficient of negative binomial distribution to data
nls_fit <- nls(Var ~ Mean + a * Mean^2, data = treated_stats, start = list(a = 0))
summary(nls_fit)
```

```{r}
# Define var-mean relationship of negative binomial distribution
disper_coef <- summary(nls_fit)$coefficients["a", "Estimate"]
neg_binom <- function(x) x + disper_coef * x^2

# Visualise fit of negative binomial distribution to data
plot(treated_stats$Mean, treated_stats$Var, xlab = "Log Means", ylab = "Log Vars")
curve(neg_binom, col = "red", add = TRUE)
legend("topleft", "Negative Binomial Fit", lty = 1, col = "red")
```


# Part 4

```{r}
log_cts <- log(norm_cts + 1)
```


```{r}
plot(log_cts[ , "untreated1"], log_cts[ , "treated1"])
grid()
```

```{r}
# Identify gene that is expressed more in treated samples
control_cond <- control_stats$Mean > 8.5 & control_stats$Mean < 9.5
treated_cond <- treated_stats$Mean > 10 & treated_stats$Mean < 11

gene1 <- rownames(norm_cts)[control_cond & treated_cond]
gene1

```
```{r}
# Identify gene that is expressed more in untreated samples
control_cond <- control_stats$Mean > 7 & control_stats$Mean < 8
treated_cond <- treated_stats$Mean > 4 & treated_stats$Mean < 5

gene2 <- rownames(norm_cts)[control_cond & treated_cond]
gene2
```
The expression of `r gene2` shows consistent differences between the control
and treated conditions.

```{r}
plot(log_cts[gene2, ], ylab = "Log Expression")
title(gene2)
```


```{r}
library(DESeq2)
```

```{r}
dds <- DESeqDataSetFromMatrix(countData = cts,
                              colData = coldata,
                              design = ~ condition)

dds <- DESeq(dds)
res <- results(dds)

res
```

Curiously, `r gene2` was designated as the most differentially expressed gene
by DESeq2 (effect size: `r signif(res[gene2, "log2FoldChange"], 3)`, p-value:
`r signif(res[gene2, "padj"], digits = 3)`), whereas `r gene1` did not appear
among the top 10 genes but showed statistical significance (effect size:
`r signif(res[gene1, "log2FoldChange"], 3)`, p-value:
`r signif(res[gene1, "padj"], digits = 3)`).

```{r}
sorted_res <- res[order(res$padj), c("log2FoldChange", "padj")]
head(sorted_res, 10)
```

# Part 5

```{r}
circ_df <- read.csv("data/CircadianRNAseq.csv")
rownames(circ_df) <- make.unique(circ_df$GeneSymbol)
circ_df[ , c("RefSeqID", "GeneSymbol")] <- NULL
circ_mat <- as.matrix(circ_df)
```

```{r}
plot(circ_mat["per1a", ], ylab = "Norm Expression", type = "b")
```

